(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{358:function(t,_,v){"use strict";v.r(_);var a=v(4),e=Object(a.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"网络基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#网络基础"}},[t._v("#")]),t._v(" "),v("strong",[t._v("网络基础")])]),t._v(" "),v("p",[v("a",{attrs:{href:"https://blog.csdn.net/buknow/article/details/81148684",target:"_blank",rel:"noopener noreferrer"}},[t._v("网络协议——七层、五层、四层协议概念及功能分析"),v("OutboundLink")],1)]),t._v(" "),v("h3",{attrs:{id:"osi-七层模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#osi-七层模型"}},[t._v("#")]),t._v(" OSI 七层模型")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("应用层")]),t._v(" "),v("p",[t._v("为应用程序提供服务，并管理应用程序之间的通信。")]),t._v(" "),v("p",[t._v("协议有：HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP")])]),t._v(" "),v("li",[v("p",[t._v("表示层")]),t._v(" "),v("p",[t._v("处理数据的标识问题，比如编码、格式转化、加密解密等")]),t._v(" "),v("p",[t._v("格式有，JPEG、ASCll、DECOIC、加密格式等")])]),t._v(" "),v("li",[v("p",[t._v("会话层")]),t._v(" "),v("p",[t._v("负责建立管理和断开通信连接，实现数据同步")])]),t._v(" "),v("li",[v("p",[t._v("传输层")]),t._v(" "),v("p",[t._v("端到端传输数据，同时处理传输错误、控制流量等")]),t._v(" "),v("p",[t._v("协议有：TCP UDP，数据包一旦离开网卡即进入网络传输层")])]),t._v(" "),v("li",[v("p",[t._v("网络层")]),t._v(" "),v("p",[t._v("地址管理、路由选择")]),t._v(" "),v("p",[t._v("协议有：ICMP IGMP IP（IPV4 IPV6）")])]),t._v(" "),v("li",[v("p",[t._v("数据链路层")]),t._v(" "),v("p",[t._v("数据分割成帧，mac 寻址、差错校验、信息纠正等(以太网)")])]),t._v(" "),v("li",[v("p",[t._v("物理层")]),t._v(" "),v("p",[t._v("利用传输介质为数据链路层提供物理连接")])])]),t._v(" "),v("p",[v("img",{attrs:{src:"/assets/img/%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B.jpg",alt:""}})]),t._v(" "),v("h3",{attrs:{id:"uri-url-urn"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#uri-url-urn"}},[t._v("#")]),t._v(" URI URL URN")]),t._v(" "),v("p",[t._v("URI, 全称为(Uniform Resource Identifier), 也就是统一资源标识符，它的作用很简单，就是区分互联网上不同的资源。\n它并不是我们常说的网址, 网址指的是 URL, 实际上 URI 包含了 URN 和 URL 两个部分，由于 URL 过于普及，就默认将 URI 视为 URL 了。")]),t._v(" "),v("p",[t._v("URI 的结构")]),t._v(" "),v("p",[v("img",{attrs:{src:"/assets/img/URI.png",alt:""}})]),t._v(" "),v("p",[t._v("scheme 表示协议名，比如 http, https, file 等等。后面必须和://连在一起\nuser:passwd@ 表示登录主机时的用户信息，不过很不安全，不推荐使用，也不常用")]),t._v(" "),v("p",[t._v("host:port 表示主机名和端口")]),t._v(" "),v("p",[t._v("path 表示请求路径，标记资源所在位置")]),t._v(" "),v("p",[t._v("query 表示查询参数，为 key=val 这种形式，多个键值对之间用&隔开")]),t._v(" "),v("p",[t._v("fragment 表示 URI 所定位的资源内的一个锚点，浏览器可以根据这个锚点跳转到对应的位置")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("https://www.baidu.com/s?wd=HTTP&rsv_spt=1\n")])])]),v("p",[t._v("复制代码这个 URI 中，https 即 scheme 部分，www.baidu.com 为 host:port 部分（注意，http 和 https 的默认端口分别为 80、443），/s 为 path 部分，而 wd=HTTP&rsv_spt=1 就是 query 部分")]),t._v(" "),v("p",[t._v("URI 编码\nURI 只能使用 ASCII, ASCII 之外的字符是不支持显示的，而且还有一部分符号是界定符，如果不加以处理就会导致解析出错。\n因此，URI 引入了编码机制，将所有非 ASCII 码字符和界定符转为十六进制字节值，然后在前面加个%。")]),t._v(" "),v("h2",{attrs:{id:"http"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" "),v("strong",[t._v("HTTP")])]),t._v(" "),v("h3",{attrs:{id:"http-请求方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-请求方法"}},[t._v("#")]),t._v(" HTTP 请求方法")]),t._v(" "),v("p",[t._v("GET: 通常用来获取资源")]),t._v(" "),v("p",[t._v("HEAD: 只请求资源的头部，该请求方法的一个使用场景是在下载一个大文件前先获取其大小再决定是否要下载, 以此可以节约带宽资源")]),t._v(" "),v("p",[t._v("POST: 提交数据，即上传数据")]),t._v(" "),v("p",[t._v("PUT: 修改数据，若资源不存在则新建一个")]),t._v(" "),v("p",[t._v("DELETE: 删除资源(几乎用不到)")]),t._v(" "),v("p",[t._v("CONNECT: 建立连接隧道，用于代理服务器")]),t._v(" "),v("p",[t._v("OPTIONS: 列出可对资源实行的请求方法，用来跨域请求，CORS 的请求预检")]),t._v(" "),v("p",[t._v("TRACE: 追踪请求-响应的传输路径")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://developer.mozilla.org/zh-cn/docs/web/http/methods",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP 请求方法"),v("OutboundLink")],1)]),t._v(" "),v("h4",{attrs:{id:"post-和-get-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#post-和-get-的区别"}},[t._v("#")]),t._v(" POST 和 GET 的区别")]),t._v(" "),v("ol",[v("li",[t._v("缓存，GET 请求会被浏览器主动缓存下来，留下历史记录，而 POST 默认不会。")]),t._v(" "),v("li",[t._v("编码，GET 只能进行 URL 编码，只能接收 ASCII 字符，而 POST 没有限制。")]),t._v(" "),v("li",[t._v("参数，GET 一般放在 URL 中，因此不安全，POST 放在请求体中，更适合传输敏感信息。")]),t._v(" "),v("li",[t._v("幂等性，GET 是幂等的，而 POST 不是")]),t._v(" "),v("li",[t._v("从 TCP 的角度，GET 请求会把请求报文一次性发出去，而 POST 会分为两个 TCP 数据包，首先发 header 部分，如果服务器响应 100(continue)， 然后发 body 部分。(火狐浏览器除外，它的 POST 请求只发一个 TCP 包)")])]),t._v(" "),v("h4",{attrs:{id:"put-和-post"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#put-和-post"}},[t._v("#")]),t._v(" PUT 和 POST")]),t._v(" "),v("p",[t._v("如果一个运算重复执行多次，产生的效果是一样的，那就是幂等。")]),t._v(" "),v("p",[t._v("PUT 请求：幂等，即重复操作不会产生变化，10 次 PUT 的创建请求与 1 次 PUT 的创建请求相同（所以 PUT 用来改资源）")]),t._v(" "),v("p",[t._v("POST 请求：不幂等的，后一个请求不会把第一个请求覆盖掉。10 次 POST 请求将会创建 10 个资源。（所以 Post 用来增资源）")]),t._v(" "),v("p",[t._v("PUT 指定了资源在服务器上的位置，POST 没有")]),t._v(" "),v("h3",{attrs:{id:"http-协议的特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-协议的特点"}},[t._v("#")]),t._v(" HTTP 协议的特点")]),t._v(" "),v("ul",[v("li",[t._v("无连接\n"),v("ul",[v("li",[t._v("限制每次连接只处理一个请求")])])]),t._v(" "),v("li",[t._v("无状态\n"),v("ul",[v("li",[t._v("协议对于事务处理没有记忆能力。")])])]),t._v(" "),v("li",[t._v("简单快速\n"),v("ul",[v("li",[t._v("客户向服务器请求服务时，只需传送请求方法和路径。")])])]),t._v(" "),v("li",[t._v("灵活\n"),v("ul",[v("li",[t._v("HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。")])])])]),t._v(" "),v("h3",{attrs:{id:"状态码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#状态码"}},[t._v("#")]),t._v(" 状态码")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP 响应代码"),v("OutboundLink")],1)]),t._v(" "),v("h4",{attrs:{id:"_1xx-信息响应状态码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1xx-信息响应状态码"}},[t._v("#")]),t._v(" 1XX 信息响应状态码")]),t._v(" "),v("p",[t._v("表示目前是协议处理的中间状态，还需要后续操作")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("100")]),t._v(" Continue 继续，一般在发送 post 请求时，已发送了 http header 之后服务端将返回此信息，表示确认，之后发送具体参数信息")]),t._v(" "),v("li",[v("strong",[t._v("101")]),t._v(" Switching Protocols。在 HTTP 升级为 WebSocket 的时候，如果服务器同意变更，就会发送状态码 101")])]),t._v(" "),v("h4",{attrs:{id:"_2xx-成功响应状态码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2xx-成功响应状态码"}},[t._v("#")]),t._v(" 2XX 成功响应状态码")]),t._v(" "),v("p",[t._v("表示成功状态")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("200")]),t._v(" OK 正常返回信息")]),t._v(" "),v("li",[v("strong",[t._v("201")]),t._v(" Created 请求成功并且服务器创建了新的资源")]),t._v(" "),v("li",[v("strong",[t._v("202")]),t._v(" Accepted 服务器已接受请求，但尚未处理")]),t._v(" "),v("li",[v("strong",[t._v("204")]),t._v(" No content，表示请求成功，但响应报文不含实体的主体部分")]),t._v(" "),v("li",[v("strong",[t._v("205")]),t._v(" Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容")]),t._v(" "),v("li",[v("strong",[t._v("206")]),t._v(" Partial Content，进行范围请求，它的使用场景为 HTTP 分块下载和断点续传，当然也会带上相应的响应头字段 "),v("code",[t._v("Content-Range")])])]),t._v(" "),v("h4",{attrs:{id:"_3xx-重定向"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3xx-重定向"}},[t._v("#")]),t._v(" 3XX 重定向")]),t._v(" "),v("p",[t._v("重定向状态，资源位置发生变动，需要重新请求")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("301")]),t._v(" Moved Permanently 永久性重定向，表示资源已被分配了新的 URL")]),t._v(" "),v("li",[v("strong",[t._v("302")]),t._v(" Found 临时性重定向，表示资源临时被分配了新的 URL")])]),t._v(" "),v("p",[t._v("网站从 HTTP 升级到了 HTTPS 了，以前的站点再也不用了，应当返回 301，这个时候浏览器默认会做缓存优化，在第二次访问的时候自动访问重定向的那个地址。如果只是暂时不可用，那么直接返回 302 即可，和 301 不同的是，浏览器并不会做缓存优化。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("303")]),t._v(" See Other 表示资源存在着另一个 URL，应使用 GET 方法获取资源")]),t._v(" "),v("li",[v("strong",[t._v("304")]),t._v(" Not Modify 未修改，当协商缓存命中时会返回")]),t._v(" "),v("li",[v("strong",[t._v("307")]),t._v(" 临时重定向，和 302 含义类似，但是期望客户端保持请求方法不变向新的地址发出请求")])]),t._v(" "),v("h4",{attrs:{id:"_4xx-客户端错误"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4xx-客户端错误"}},[t._v("#")]),t._v(" 4XX 客户端错误")]),t._v(" "),v("p",[t._v("请求报文有误")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("400")]),t._v(" Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求")]),t._v(" "),v("li",[v("strong",[t._v("401")]),t._v(" Unauthorized 请求未授权")]),t._v(" "),v("li",[v("strong",[t._v("403")]),t._v(" forbidden 这实际上并不是请求报文出错，而是服务器禁止访问，原因有很多，比如法律禁止、信息敏感")]),t._v(" "),v("li",[v("strong",[t._v("404")]),t._v(" Not Found 在服务器上没有找到请求的资源")]),t._v(" "),v("li",[v("strong",[t._v("405")]),t._v(" Method Not Allowed: 请求方法不被服务器端允许。")]),t._v(" "),v("li",[v("strong",[t._v("406")]),t._v(" Not Acceptable: 资源无法满足客户端的条件。")]),t._v(" "),v("li",[v("strong",[t._v("408")]),t._v(" Request Timeout: 服务器等待了太长时间。")]),t._v(" "),v("li",[v("strong",[t._v("409")]),t._v(" Conflict: 多个请求发生了冲突。")]),t._v(" "),v("li",[v("strong",[t._v("413")]),t._v(" Request Entity Too Large: 请求体的数据过大。")]),t._v(" "),v("li",[v("strong",[t._v("414")]),t._v(" Request-URI Too Long: 请求行里的 URI 太大。")]),t._v(" "),v("li",[v("strong",[t._v("429")]),t._v(" Too Many Request: 客户端发送的请求过多。")]),t._v(" "),v("li",[v("strong",[t._v("431")]),t._v(" Request Header Fields Too Large 请求头的字段内容太大。")])]),t._v(" "),v("h4",{attrs:{id:"_5xx-服务器错误"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5xx-服务器错误"}},[t._v("#")]),t._v(" 5XX 服务器错误")]),t._v(" "),v("p",[t._v("服务器端发生错误")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("500")]),t._v(" Internal Server Error:仅仅告诉你服务器出错了")]),t._v(" "),v("li",[v("strong",[t._v("501")]),t._v(" Not Implemented:表示服务器不支持当前请求所需要的某个功能")]),t._v(" "),v("li",[v("strong",[t._v("502")]),t._v(" Bad Gateway:服务器自身是正常的，但访问的时候出错了，")]),t._v(" "),v("li",[v("strong",[t._v("503")]),t._v(" Service Unavailable:表明服务器暂时处于超负载或正在停机维护，无法处理请求")])]),t._v(" "),v("h3",{attrs:{id:"http-头部"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-头部"}},[t._v("#")]),t._v(" HTTP 头部")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP Headers"),v("OutboundLink")],1)]),t._v(" "),v("h4",{attrs:{id:"请求头部"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#请求头部"}},[t._v("#")]),t._v(" 请求头部")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("cookie: ''\nhost: ''\nIf-None-Match: ''\nIf-Modified-Since: ''\n")])])]),v("h5",{attrs:{id:"host-与-虚拟主机"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#host-与-虚拟主机"}},[t._v("#")]),t._v(" host 与 虚拟主机")]),t._v(" "),v("p",[t._v("host 字段是 HTTP1.1 新增的头部，主要用来实现虚拟主机")]),t._v(" "),v("p",[t._v("一台物理主机上当然可以在不同端口上部署多个服务端。一台主机也可以给多个不同的域名以供访问。")]),t._v(" "),v("p",[t._v("那么可以通过 nginx 来实现虚拟主机，配置类似如下。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("server\n{\n  listen 80\n  server_name www.aaa.com;\n  ## 可以在这进行代理\n  location / {\n    proxy_pass localhost:3000\n  }\n}\nserver\n{\n  listen 80\n  server_name www.bbb.com;\n  location / {\n    proxy_pass localhost:8080\n  }\n}\n")])])]),v("p",[t._v("无论是 www.aaa.com 还是 www.bbb.com，都能访问我们的服务器。")]),t._v(" "),v("p",[t._v("根据域名/host 的不同，代理向不同的服务端。")]),t._v(" "),v("h4",{attrs:{id:"响应头部"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#响应头部"}},[t._v("#")]),t._v(" 响应头部")]),t._v(" "),v("p",[t._v("Set-Cookie: ''\nLocation: '/'\nETag: ''\nLast-Modified: ''\nCache-Control: 'max-age='\nexpires: ''\naccess-control-allow-origin: '*'\naccess-control-allow-credentials: true ##通用头部\naccept: ''\naccept-language: ''\ncontent-Type: ''\ncontent-length: ''")]),t._v(" "),v("h4",{attrs:{id:"通用头部"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#通用头部"}},[t._v("#")]),t._v(" 通用头部")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("accept: ''\naccept-language: ''\ncontent-Type: ''\ncontent-length: ''\n")])])]),v("h3",{attrs:{id:"请求报文"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#请求报文"}},[t._v("#")]),t._v(" 请求报文")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("home "),v("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("\n")])])]),v("ul",[v("li",[t._v("请求行\n"),v("ul",[v("li",[t._v("请求方法")]),t._v(" "),v("li",[t._v("请求 URL")]),t._v(" "),v("li",[t._v("HTTP 协议版本号")])])]),t._v(" "),v("li",[t._v("请求头\n"),v("ul",[v("li",[t._v("用来说明一些附加信息")])])]),t._v(" "),v("li",[t._v("空行\n"),v("ul",[v("li",[t._v("用来区分开头部和实体")])])]),t._v(" "),v("li",[t._v("请求体\n"),v("ul",[v("li",[t._v("可以添加任意的其他数据")])])])]),t._v(" "),v("h3",{attrs:{id:"响应报文"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#响应报文"}},[t._v("#")]),t._v(" 响应报文")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OK")]),t._v("\n")])])]),v("ul",[v("li",[t._v("状态行\n"),v("ul",[v("li",[t._v("HTTP 协议版本号")]),t._v(" "),v("li",[t._v("状态码")]),t._v(" "),v("li",[t._v("状态消息")])])]),t._v(" "),v("li",[t._v("响应头\n"),v("ul",[v("li",[t._v("说明客户端要使用的一些附加信息")])])]),t._v(" "),v("li",[t._v("空行\n"),v("ul",[v("li",[t._v("用来区分开头部和实体")])])]),t._v(" "),v("li",[t._v("响应体\n"),v("ul",[v("li",[t._v("返回给客户端的文本信息")])])])]),t._v(" "),v("h3",{attrs:{id:"http1-1"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http1-1"}},[t._v("#")]),t._v(" HTTP1.1")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("连接方面的区别")]),t._v(" "),v("p",[t._v("http1.1 默认使用长连接\nhttp1.0 默认使用短连接。\nhttp1.1 通过使用持久连接来使多个 http 请求复用同一个 TCP 连接，以此来避免使用非持久连接时每次需要建立连接的时延")])]),t._v(" "),v("li",[v("p",[t._v("资源请求方面的区别")]),t._v(" "),v("p",[t._v("在 http1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个\n对象送过来了，并且不支持断点续传功能，http1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码\n是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。")])]),t._v(" "),v("li",[v("p",[t._v("缓存方面的区别")]),t._v(" "),v("p",[t._v("在 http1.0 中主要使用 header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，http1.1\n则引入了更多的缓存控制策略例如 Etag、If-Unmodified-Since、If-Match、If-None-Match 等更多可供选择的缓存头来\n控制缓存策略。")])]),t._v(" "),v("li",[v("p",[t._v("http1.1 中还新增了 host 字段，用来指定服务器的域名。http1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，\n请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机\n，并且它们共享一个 IP 地址。因此有了 host 字段，就可以将请求发往同一台服务器上的不同网站。")])]),t._v(" "),v("li",[v("p",[t._v("http1.1 相对于 http1.0 还新增了很多方法，如 PUT、HEAD、OPTIONS 等。")])])]),t._v(" "),v("h4",{attrs:{id:"http1-1-长连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http1-1-长连接"}},[t._v("#")]),t._v(" HTTP1.1 长连接")]),t._v(" "),v("p",[t._v("HTTP 协议采用“请求-应答”模式，并且 HTTP 是基于 TCP 进行连接的。普通模式（非 keep-alive）时，每个请求或应答都需要建立一个连接，完成之后立即断开。")]),t._v(" "),v("p",[t._v("当使用"),v("code",[t._v("Conection: keep-alive")]),t._v("模式（又称持久连接、连接重用）时，keep-alive 使客户端道服务器端连接持续有效，即不关闭底层的 TCP 连接，当出现对服务器的后继请求时，keep-alive 功能避免重新建立连接。")]),t._v(" "),v("p",[v("code",[t._v("Keep-Alive: timeout=5, max=1000")])]),t._v(" "),v("p",[v("code",[t._v("timeout")]),t._v("：指定了一个空闲连接需要保持打开状态的最小时长（以秒为单位）")]),t._v(" "),v("p",[v("code",[t._v("max")]),t._v("：在连接关闭之前，在此连接可以发送的请求的最大值。")]),t._v(" "),v("h4",{attrs:{id:"http1-1-管线化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http1-1-管线化"}},[t._v("#")]),t._v(" HTTP1.1 管线化")]),t._v(" "),v("p",[v("img",{attrs:{src:"/assets/img/pipe.png",alt:"pipe"}})]),t._v(" "),v("p",[t._v("管线化后，请求和响应不再是依次交替的了。他可以支持一次性发送多个请求，并一次性接收多个响应。")]),t._v(" "),v("ul",[v("li",[t._v("只有 GET 与 head 请求可以进行管线化，POST 有限制")]),t._v(" "),v("li",[t._v("初次创建连接时不应该启动管线机制，因为服务器不一定支持该协议")])]),t._v(" "),v("h3",{attrs:{id:"http-数据协商"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-数据协商"}},[t._v("#")]),t._v(" HTTP 数据协商")]),t._v(" "),v("p",[t._v("在客户端向服务端发送请求的时候，客户端会申明可以接受的数据格式和数据相关的一些限制是什么样的；服务端在接受到这个请求时他会根据这个信息进行判断到底返回怎样的数据。")]),t._v(" "),v("h4",{attrs:{id:"请求"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#请求"}},[t._v("#")]),t._v(" 请求")]),t._v(" "),v("ul",[v("li",[t._v("Accept\n"),v("ul",[v("li",[t._v("在请求中使用 Accept 可申明想要的数据格式")])])]),t._v(" "),v("li",[t._v("Accept-Encoding\n"),v("ul",[v("li",[t._v("告诉服务端使用什么的方式来进行压缩")]),t._v(" "),v("li",[t._v("例如：gzip、deflate、br")])])]),t._v(" "),v("li",[t._v("Accept-Language\n"),v("ul",[v("li",[t._v("描述语言信息")])])]),t._v(" "),v("li",[t._v("User-Agent\n"),v("ul",[v("li",[t._v("用来描述客户端浏览器相关信息")]),t._v(" "),v("li",[t._v("可以用来区分 PC 端页面和移动端页面")])])])]),t._v(" "),v("h4",{attrs:{id:"响应"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#响应"}},[t._v("#")]),t._v(" 响应")]),t._v(" "),v("ul",[v("li",[t._v("Content-Type\n"),v("ul",[v("li",[t._v("对应 Accept，从请求中的 Accept 支持的数据格式中选一种来返回")])])]),t._v(" "),v("li",[t._v("Content-Encoding\n"),v("ul",[v("li",[t._v("对应 Accept-Encoding，指服务端到底使用的是那种压缩方式")])])]),t._v(" "),v("li",[t._v("Content-Language\n"),v("ul",[v("li",[t._v("对应 Accept-Language")])])])]),t._v(" "),v("h4",{attrs:{id:"form-表单中-enctype-数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#form-表单中-enctype-数据类型"}},[t._v("#")]),t._v(" form 表单中 enctype 数据类型")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("application/x-www-form-urlencoded")]),t._v(" "),v("ul",[v("li",[t._v("key=value&key=value 格式")])])]),t._v(" "),v("li",[v("code",[t._v("multipart/form-data")]),t._v(" "),v("ul",[v("li",[t._v("用于提交文件")]),t._v(" "),v("li",[t._v("multipart 表示请求是由多个部分组成（因为上传文件的时候文件不能以字符串形式提交，需要单独分出来）")]),t._v(" "),v("li",[t._v("boundary 用来分隔不同部分")])])]),t._v(" "),v("li",[v("code",[t._v("text/plain")])])]),t._v(" "),v("h3",{attrs:{id:"restful"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#restful"}},[t._v("#")]),t._v(" RESTful")]),t._v(" "),v("p",[v("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2011/09/restful.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("理解 RESTful 架构"),v("OutboundLink")],1)]),t._v(" "),v("p",[t._v("RESTful 架构：")]),t._v(" "),v("p",[t._v("（1）每一个 URI 代表一种资源,所以网址中不能有动词，只能有名词。")]),t._v(" "),v("p",[t._v("（2）客户端和服务器之间，传递这种资源的某种表现层；")]),t._v(" "),v("p",[t._v('（3）客户端通过四个 HTTP 动词，对服务器端资源进行操作，实现"表现层状态转化"。')]),t._v(" "),v("h2",{attrs:{id:"http-2-0"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-2-0"}},[t._v("#")]),t._v(" "),v("strong",[t._v("HTTP 2.0")])]),t._v(" "),v("p",[v("a",{attrs:{href:"https://mp.weixin.qq.com/s/GICbiyJpINrHZ41u_4zT-A",target:"_blank",rel:"noopener noreferrer"}},[v("strong",[t._v("HTTP1.0、HTTP1.1 和 HTTP2.0 的区别")]),v("OutboundLink")],1)]),t._v(" "),v("p",[t._v("由于 HTTPS 在安全方面已经做的非常好了，HTTP2.0 改进的关注点放在了性能方面")]),t._v(" "),v("h3",{attrs:{id:"头部压缩"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#头部压缩"}},[t._v("#")]),t._v(" 头部压缩")]),t._v(" "),v("p",[t._v("在 HTTP 1.X 中，使用文本的形式传输头部，在头部携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。")]),t._v(" "),v("p",[t._v("在 HTTP 2.0 中，对报文的头部进行压缩，在客户端和服务端都维护着一份字典记录着头部对应的索引")]),t._v(" "),v("p",[t._v("在 HTTP/1.1 及之前的时代，请求体一般会有响应的压缩编码过程，通过"),v("code",[t._v("Content-Encoding")]),t._v("头部字段来指定，但当请求字段非常复杂的时候，尤其对于 GET 请求，请求报文几乎全是请求头，这个时候还是存在非常大的优化空间的。HTTP/2 针对头部字段，也采用了对应的压缩算法——HPACK，对请求头进行压缩。")]),t._v(" "),v("p",[t._v("HPACK 算法是专门为 HTTP/2 服务的，它主要的亮点有两个：")]),t._v(" "),v("ul",[v("li",[t._v("首先是在服务器和客户端之间建立哈希表，将用到的字段存放在这张表中，那么在传输的时候对于之前出现过的值，只需要把索引(比如 0，1，2，...)传给对方即可，对方拿到索引查表就行了。这种传索引的方式，可以说让请求头字段得到极大程度的精简和复用。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"/assets/img/%E5%A4%B4%E9%83%A8%E5%8E%8B%E7%BC%A9.png",alt:""}})]),t._v(" "),v("p",[t._v('HTTP/2 当中废除了起始行的概念，将起始行中的请求方法、URI、状态码转换成了头字段，不过这些字段都有一个":"前缀，用来和其它请求头区分开。')]),t._v(" "),v("ul",[v("li",[t._v("其次是对于整数和字符串进行哈夫曼编码，哈夫曼编码的原理就是先将所有出现的字符建立一张索引表，然后让出现次数多的字符对应的索引尽可能短，传输的时候也是传输这样的索引序列，可以达到非常高的压缩率。")])]),t._v(" "),v("h3",{attrs:{id:"多路复用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[t._v("#")]),t._v(" 多路复用")]),t._v(" "),v("p",[t._v("HTTP/2 从 HTTP 协议本身解决了队头阻塞问题。注意，这里并不是指的 TCP 队头阻塞，而是 HTTP 队头阻塞，两者并不是一回事。TCP 的队头阻塞是在数据包层面，单位是数据包，前一个报文没有收到便不会将后面收到的报文上传给 HTTP，而 HTTP 的队头阻塞是在 HTTP 请求-响应层面，前一个请求没处理完，后面的请求就要阻塞住。两者所在的层次不一样。")]),t._v(" "),v("p",[t._v("在 HTTP 2.0 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。")]),t._v(" "),v("p",[t._v("帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。")]),t._v(" "),v("p",[t._v("多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://yck-1254263422.cos.ap-shanghai.myqcloud.com/blog/2019-06-01-042650.png",alt:""}})]),t._v(" "),v("h3",{attrs:{id:"二进制传输"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二进制传输"}},[t._v("#")]),t._v(" 二进制传输")]),t._v(" "),v("p",[t._v("HTTP 2.0 中所有加强性能的核心点在于此。在之前的 HTTP 版本中，我们是通过文本的方式传输数据。在 HTTP 2.0 中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。")]),t._v(" "),v("ul",[v("li",[t._v("http1.1 头信息必须是字符，数据体可以是文本，也可以是二进制")]),t._v(" "),v("li",[t._v("http2 全部是二进制")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://yck-1254263422.cos.ap-shanghai.myqcloud.com/blog/2019-06-01-042649.png",alt:""}})]),t._v(" "),v("h3",{attrs:{id:"服务端推送"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#服务端推送"}},[t._v("#")]),t._v(" 服务端推送")]),t._v(" "),v("p",[t._v("在 HTTP 2.0 中，服务端可以预测客户端需要的资源，并主动推送给客户端")]),t._v(" "),v("p",[t._v("HTTP1.1 解析 HTML 里面 CSS、JS 文件，需要解析到 CSS 和 JS 文件发送请求，等数据回来渲染")]),t._v(" "),v("p",[t._v("HTTP2 解析 HTML 里面建立连接，如果有 CSS、JS 文件，服务端会主动推送到客户端，不在发送请求获取 CSS、JS 文件")]),t._v(" "),v("h2",{attrs:{id:"https"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" "),v("strong",[t._v("HTTPS")])]),t._v(" "),v("p",[v("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSL/TLS 协议运行机制的概述"),v("OutboundLink")],1)]),t._v(" "),v("p",[v("a",{attrs:{href:"https://www.jianshu.com/p/14cd2c9d2cd2",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTPS 原理及流程"),v("OutboundLink")],1)]),t._v(" "),v("p",[v("a",{attrs:{href:"https://blog.csdn.net/qq_36894974/article/details/104856083?utm_source=app",target:"_blank",rel:"noopener noreferrer"}},[t._v("看完这篇 HTTPS，和面试官扯皮就没问题了"),v("OutboundLink")],1)]),t._v(" "),v("h3",{attrs:{id:"https-和-http-区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#https-和-http-区别"}},[t._v("#")]),t._v(" HTTPS 和 HTTP 区别")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("HTTP 的 URL 以 http:// 开头，而 HTTPS 的 URL 以 https:// 开头")])]),t._v(" "),v("li",[v("p",[t._v("HTTP 标准端口是 80 ，而 HTTPS 的标准端口是 443")])]),t._v(" "),v("li",[v("p",[t._v("HTTP 是不安全的 信息是明文传输，而 HTTPS 是安全的具有安全性的 ssl 加密传输")])]),t._v(" "),v("li",[v("p",[t._v("HTTP 无需证书，而 HTTPS 需要认证证书")])])]),t._v(" "),v("h3",{attrs:{id:"防止中间人攻击"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#防止中间人攻击"}},[t._v("#")]),t._v(" 防止中间人攻击")]),t._v(" "),v("p",[t._v("服务器向客户端发送公钥。\n攻击者截获公钥，保留在自己手上。\n然后攻击者自己生成一个【伪造的】公钥，发给客户端。\n客户端收到伪造的公钥后，生成加密 hash 值发给服务器。\n攻击者获得加密 hash 值，用自己的私钥解密获得真秘钥。\n同时生成假的加密 hash 值，发给服务器。\n服务器用私钥解密获得假秘钥。")]),t._v(" "),v("p",[t._v("这里就需要一个强大的公证人，就是 CA，操作系统会做 CA 证书的判断。")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://blog.csdn.net/liuxingrong666/article/details/83869161?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTPS 的数字证书验证原理"),v("OutboundLink")],1)]),t._v(" "),v("h2",{attrs:{id:"dns"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dns"}},[t._v("#")]),t._v(" "),v("strong",[t._v("DNS")])]),t._v(" "),v("p",[t._v("DNS 查询过程")]),t._v(" "),v("ol",[v("li",[t._v("浏览器是否有缓存")]),t._v(" "),v("li",[t._v("操作系统是否有缓存")]),t._v(" "),v("li",[t._v("本地 Hosts 文件是否有缓存")]),t._v(" "),v("li",[t._v("本地 DNS 服务器是否有缓存")]),t._v(" "),v("li",[t._v("向根域名 DNS 服务器查询，若知道对应 IP 则返回 IP，不知道则告诉本地 DNS 服务器要去哪个顶级域名服务器查询")]),t._v(" "),v("li",[t._v("迭代，直到找到对应的 ip")])]),t._v(" "),v("p",[t._v("递归")]),t._v(" "),v("p",[t._v("本地 <=> 本地 DNS 服务器 <=> 权威 DNS 服务器")]),t._v(" "),v("p",[t._v("迭代")]),t._v(" "),v("p",[t._v("本地 DNS 服务器 <=> 根域名服务器，若查不到则进行下一步")]),t._v(" "),v("p",[t._v("​ <=> 顶级域名服务器，若查不到则进行下一步")]),t._v(" "),v("p",[t._v("​ <=> 二级域名服务器...")]),t._v(" "),v("p",[t._v("解析记录")]),t._v(" "),v("p",[t._v("A 记录，解析域名到 IP\nCNAME 记录，解析域名到域名\n其他各种记录")]),t._v(" "),v("h2",{attrs:{id:"tcp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[t._v("#")]),t._v(" "),v("strong",[t._v("TCP")])]),t._v(" "),v("p",[v("a",{attrs:{href:"https://blog.csdn.net/qq_38950316/article/details/81087809",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP 的三次握手与四次挥手理解及面试题"),v("OutboundLink")],1),t._v(" "),v("a",{attrs:{href:"https://www.cnblogs.com/nevermorewang/p/8906833.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http 三次握手四次挥手"),v("OutboundLink")],1)]),t._v(" "),v("h3",{attrs:{id:"tcp-保证可靠传输"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-保证可靠传输"}},[t._v("#")]),t._v(" TCP 保证可靠传输")]),t._v(" "),v("ol",[v("li",[t._v("应用数据被分割成 TCP 认为最适合发送的数据块。")]),t._v(" "),v("li",[t._v("超时重传：当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。")]),t._v(" "),v("li",[t._v("TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。")]),t._v(" "),v("li",[t._v("校验和：TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。")]),t._v(" "),v("li",[t._v("TCP 的接收端会丢弃重复的数据。")]),t._v(" "),v("li",[t._v("流量控制：TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的我数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。")]),t._v(" "),v("li",[t._v("拥塞控制：当网络拥塞时，减少数据的发送。")])]),t._v(" "),v("h3",{attrs:{id:"tcp-头部"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-头部"}},[t._v("#")]),t._v(" TCP 头部")]),t._v(" "),v("p",[v("img",{attrs:{src:"/assets/img/TCP.png",alt:"TCP header"}})]),t._v(" "),v("p",[t._v("对于 TCP 头部来说，以下几个字段是很重要的:")]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("序列号")]),t._v(" （Sequence number），这个序号保证了 TCP 传输的报文都是有序的，对端可以通过序号顺序的拼接报文")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("确认号")]),t._v(" （Acknowledgement Number），这个序号表示数据接收端期望接收的下一个字节的编号是多少，同时也表示上一个序号的数据已经收到")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("窗口大小")]),t._v(" （Window Size），表示还能接收多少字节的数据，用于流量控制")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("标识符")])]),t._v(" "),v("ul",[v("li",[t._v("ACK=1 ：该字段为一表示确认号字段有效。此外，TCP 还规定在连接建立后传送的所有报文段都必须把 ACK=1。")]),t._v(" "),v("li",[t._v("SYN=1：当 SYN=1，ACK=0 时，表示当前报文段是一个连接请求报文。当 SYN=1，ACK=1 时，表示当前报文段是一个同意建立连接的应答报文。")]),t._v(" "),v("li",[t._v("FIN=1：该字段为一表示此报文段是一个释放连接的请求报文。")]),t._v(" "),v("li",[t._v("URG=1 : 该字段为一表示本数据报的数据部分包含紧急信息，是一个高优先级数据报文，此时紧急指针有效。紧急数据一定位于当前数据包数据部分的最前面，紧急指针标明了紧急数据的尾部。")]),t._v(" "),v("li",[t._v("PSH=1 ：该字段为一表示接收端应该立即将数据 push 给应用层，而不是等到缓冲区满后再提交。")]),t._v(" "),v("li",[t._v("RST=1：该字段为一表示当前 TCP 连接出现严重问题，可能需要重新建立 TCP 连接，也可以用于拒绝非法的报文段和拒绝连接请求。")])])])]),t._v(" "),v("h3",{attrs:{id:"三次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[t._v("#")]),t._v(" 三次握手")]),t._v(" "),v("p",[t._v("刚开始客户端处于 closed 状态，服务端处于 listen 状态。然后")]),t._v(" "),v("p",[t._v("Client 给 Server 发送报文，Server 知道自己能接收到 Client 发送的报文")]),t._v(" "),v("p",[t._v("该报文的 SYN = 1， seq = x")]),t._v(" "),v("p",[t._v("Server 给 Client 发送报文，Client 知道自己能接收 Server 发送的报文，知道自己发送的报文能被 Server 接收")]),t._v(" "),v("p",[t._v("该报文的 SYN = 1, ACK = 1，ack = x + 1， seq = y")]),t._v(" "),v("p",[t._v("Client 给 Server 发送报文，Server 知道自己发送的报文能被 Client 接收。")]),t._v(" "),v("p",[t._v("该报文的 ACK = 1 ,ack = y + 1")]),t._v(" "),v("p",[t._v("经过三次握手，客户端（Client）和服务端（Server）都知道自己发送的报文能被对方接收，也知道自己能接收到对方的报文。")]),t._v(" "),v("h3",{attrs:{id:"两次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#两次握手"}},[t._v("#")]),t._v(" 两次握手")]),t._v(" "),v("p",[t._v("防止已经失效的连接请求报文段被服务端接收的情况，从而产生错误。")]),t._v(" "),v("p",[t._v("客户端发送了一个连接请求 A，但是因为网络原因造成了超时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到达服务端，服务端应答完就建立了请求，然后接收数据后释放了连接。")]),t._v(" "),v("p",[t._v("假设这时候连接请求 A 在两端关闭后终于抵达了服务端，那么此时服务端会认为客户端又需要建立 TCP 连接，从而应答了该请求并进入 ESTABLISHED 状态。但是客户端其实是 CLOSED 的状态，那么就会导致服务端一直等待，造成资源的浪费。")]),t._v(" "),v("p",[t._v("如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接")]),t._v(" "),v("h3",{attrs:{id:"四次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[t._v("#")]),t._v(" 四次挥手")]),t._v(" "),v("p",[v("img",{attrs:{src:"/assets/img/quarticBye.png",alt:"四次挥手"}})]),t._v(" "),v("p",[t._v("刚开始双方都处于 establised 状态，假如是客户端先发起关闭请求，则：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("第一次挥手：客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求")])]),t._v(" "),v("li",[v("p",[t._v("第二次握手：B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，表示 A 到 B 的连接已经释放，不接收 A 发的数据了。但是因为 TCP 连接时双向的，所以 B 仍旧可以发送数据给 A")])]),t._v(" "),v("li",[v("p",[t._v("第三次挥手：B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态")])]),t._v(" "),v("li",[v("p",[t._v("第四次挥手：A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态")])])]),t._v(" "),v("p",[t._v("由于在客户端要关闭 TCP 连接的时候，服务端可能还在发送数据；所以服务端先进行第二次挥手，这个报文的作用是服务端不再接收数据；当服务端的数据全部发送过去后，再一次挥手，这样服务端就不再发送数据了；至此，TCP 连接就关闭了")]),t._v(" "),v("h3",{attrs:{id:"a-要进入-time-wait-状态，等待-2msl-时间后才进入-closed-状态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#a-要进入-time-wait-状态，等待-2msl-时间后才进入-closed-状态"}},[t._v("#")]),t._v(" A 要进入 TIME-WAIT 状态，等待 2MSL 时间后才进入 CLOSED 状态")]),t._v(" "),v("p",[t._v("为了保证 B 能收到 A 的确认应答。若 A 发完确认应答后直接进入 CLOSED 状态，如果确认应答因为网络问题一直没有到达，那么会造成 B 不能正常关闭。")]),t._v(" "),v("h3",{attrs:{id:"建立连接是三次握手，关闭连接确是四次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#建立连接是三次握手，关闭连接确是四次挥手"}},[t._v("#")]),t._v(" 建立连接是三次握手，关闭连接确是四次挥手")]),t._v(" "),v("p",[t._v("建立连接的时候， 服务器在 LISTEN 状态下，收到建立连接请求的 SYN 报文后，把 ACK 和 SYN 放在一个报文里发送给客户端。")]),t._v(" "),v("p",[t._v("而关闭连接时，服务器收到对方的 FIN 报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了")]),t._v(" "),v("h3",{attrs:{id:"arq-（超时重传）协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#arq-（超时重传）协议"}},[t._v("#")]),t._v(" ARQ （超时重传）协议")]),t._v(" "),v("p",[t._v("通过确认和超时机制保证了数据的正确送达，ARQ 协议包含"),v("code",[t._v("停止等待 ARQ")]),t._v(" 和"),v("code",[t._v("连续 ARQ")])]),t._v(" "),v("h4",{attrs:{id:"停止等待-arq"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#停止等待-arq"}},[t._v("#")]),t._v(" 停止等待 ARQ")]),t._v(" "),v("p",[v("strong",[t._v("正常传输过程")])]),t._v(" "),v("p",[t._v("只要 A 向 B 发送一段报文，都要停止发送并启动一个定时器，等待对端回应，在定时器时间内接收到对端应答就取消定时器并发送下一段报文。")]),t._v(" "),v("p",[v("strong",[t._v("当报文丢失或出错：")])]),t._v(" "),v("p",[t._v("报文传输的过程中丢包： 这时候超过定时器设定的时间就会再次发送丢包的数据直到对端响应，所以需要每次都备份发送的数据。")]),t._v(" "),v("p",[t._v("传输过程中报文出错： 对端会抛弃该报文并等待 A 端重传。")]),t._v(" "),v("p",[t._v("PS：一般定时器设定的时间都会大于一个 RTT 的平均时间。")]),t._v(" "),v("p",[v("strong",[t._v("ACK 超时或丢失：")])]),t._v(" "),v("p",[t._v("对端传输的应答也可能出现丢失或超时的情况。那么超过定时器时间 A 端照样会重传报文。这时候 B 端收到相同序号的报文会丢弃该报文并重传应答，直到 A 端发送下一个序号的报文。")]),t._v(" "),v("p",[t._v("这个协议的缺点就是传输效率低，在良好的网络环境下每次发送报文都得等待对端的 ACK 。")]),t._v(" "),v("h4",{attrs:{id:"连续-arq"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#连续-arq"}},[t._v("#")]),t._v(" 连续 ARQ")]),t._v(" "),v("p",[t._v("在连续 ARQ 中，发送端拥有一个发送窗口，可以在没有收到应答的情况下持续发送窗口内的数据，这样相比停止等待 ARQ 协议来说减少了等待时间，提高了效率。")]),t._v(" "),v("h5",{attrs:{id:"累计确认"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#累计确认"}},[t._v("#")]),t._v(" 累计确认")]),t._v(" "),v("p",[t._v("连续 ARQ 中，接收端会持续不断收到报文。如果和停止等待 ARQ 中接收一个报文就发送一个应答一样，就太浪费资源了。通过累计确认，可以在收到多个报文以后统一回复一个应答报文。报文中的 ACK 可以用来告诉发送端这个序号之前的数据已经全部接收到了，下次请发送这个序号 + 1 的数据。")]),t._v(" "),v("p",[t._v("但是累计确认也有一个弊端。在连续接收报文时，可能会遇到接收到序号 5 的报文后，并未接到序号 6 的报文，然而序号 7 以后的报文已经接收。遇到这种情况时，ACK 只能回复 6，这样会造成发送端重复发送数据，这种情况下可以通过 Sack 来解决。")]),t._v(" "),v("h5",{attrs:{id:"滑动窗口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口"}},[t._v("#")]),t._v(" 滑动窗口")]),t._v(" "),v("p",[t._v("上面讲到了发送窗口。在 TCP 中，两端都维护着窗口：分别为发送端窗口和接收端窗口。")]),t._v(" "),v("p",[t._v("发送端窗口包含已发送但未收到应答的数据和可以发送但是未发送的数据。")]),t._v(" "),v("p",[v("img",{attrs:{src:"/assets/img/slideWindow.png",alt:"滑动窗口"}})]),t._v(" "),v("p",[t._v("发送端窗口是由接收窗口剩余大小决定的。接收方会把当前接收窗口的剩余大小写入应答报文，发送端收到应答后根据该值和当前网络拥塞情况设置发送窗口的大小，所以发送窗口的大小是不断变化的。")]),t._v(" "),v("p",[t._v("当发送端接收到应答报文后，会随之将窗口进行滑动")]),t._v(" "),v("p",[v("strong",[t._v("滑动窗口实现了流量控制")]),t._v("。接收方通过报文告知发送方还可以发送多少数据，从而保证接收方能够来得及接收数据。")]),t._v(" "),v("p",[v("strong",[t._v("Zero 窗口")])]),t._v(" "),v("p",[t._v("在发送报文的过程中，可能会遇到对端出现零窗口的情况。在该情况下，发送端会停止发送数据，并启动 persistent timer 。该定时器会定时发送请求给对端，让对端告知窗口大小。在重试次数超过一定次数后，可能会中断 TCP 链接。")]),t._v(" "),v("h3",{attrs:{id:"拥塞控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#拥塞控制"}},[t._v("#")]),t._v(" 拥塞控制")]),t._v(" "),v("p",[t._v("拥塞处理和流量控制不同，后者是作用于接收方，保证接收方来得及接受数据。而前者是作用于网络，防止过多的数据拥塞网络，避免出现网络负载过大的情况。")]),t._v(" "),v("p",[t._v("拥塞处理包括了四个算法，分别为：慢开始，拥塞避免，快速重传，快速恢复。")]),t._v(" "),v("h4",{attrs:{id:"慢开始算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#慢开始算法"}},[t._v("#")]),t._v(" 慢开始算法")]),t._v(" "),v("p",[t._v("慢开始算法，顾名思义，就是在传输开始时将发送窗口从 1 开始指数级扩大，从而避免一开始就传输大量数据导致网络拥塞。")]),t._v(" "),v("p",[t._v("慢开始算法步骤具体如下")]),t._v(" "),v("ol",[v("li",[t._v("连接初始设置拥塞窗口（Congestion Window） 为 1 MSS（一个分段的最大数据量）")]),t._v(" "),v("li",[t._v("每过一个 RTT (往返时延) 就将窗口大小乘二")]),t._v(" "),v("li",[t._v("指数级增长肯定不能没有限制的，所以有一个阈值限制，当窗口大小大于阈值时就会启动拥塞避免算法")])]),t._v(" "),v("h4",{attrs:{id:"拥塞避免算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#拥塞避免算法"}},[t._v("#")]),t._v(" 拥塞避免算法")]),t._v(" "),v("p",[t._v("拥塞避免算法相比简单点，每过一个 RTT 窗口大小只加一，这样能够避免指数级增长导致网络拥塞，慢慢将大小调整到最佳值。")]),t._v(" "),v("p",[t._v("在传输过程中可能定时器超时的情况，这时候 TCP 会认为网络拥塞了，会马上进行以下步骤：")]),t._v(" "),v("ul",[v("li",[t._v("将阈值设为当前拥塞窗口的一半")]),t._v(" "),v("li",[t._v("将拥塞窗口设为 1 MSS")]),t._v(" "),v("li",[t._v("启动拥塞避免算法")])]),t._v(" "),v("h4",{attrs:{id:"快速重传"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#快速重传"}},[t._v("#")]),t._v(" 快速重传")]),t._v(" "),v("p",[t._v("快速重传一般和快恢复一起出现。一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号（没有 Sack 的情况下）。如果收到三个重复的 ACK，无需等待定时器超时再重发而是启动快速重传。具体算法分为两种：")]),t._v(" "),v("h4",{attrs:{id:"rtt-与-rto"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rtt-与-rto"}},[t._v("#")]),t._v(" RTT 与 RTO")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("RTT")]),t._v("(Round Trip Time)\n"),v("ul",[v("li",[t._v("一个连接的往返时间，即数据发送时刻到接收到确认的时刻的差值。")])])]),t._v(" "),v("li",[v("strong",[t._v("RTO")]),t._v("(Retransmission Time Out)\n"),v("ul",[v("li",[t._v("重传超时时间，即从数据发送时刻算起，超过这个时间便执行重传。")])])]),t._v(" "),v("li",[t._v("RTT 和 RTO 的关系是\n"),v("ul",[v("li",[t._v("由于网络波动的不确定性，每个 RTT 都是动态变化的，所以 RTO 也应随着 RTT 动态变化。")])])])]),t._v(" "),v("p",[v("a",{attrs:{href:"https://blog.csdn.net/whgtheone/article/details/80970292",target:"_blank",rel:"noopener noreferrer"}},[t._v("博客链接"),v("OutboundLink")],1)]),t._v(" "),v("h4",{attrs:{id:"tcp-小结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-小结"}},[t._v("#")]),t._v(" TCP 小结")]),t._v(" "),v("p",[t._v("为什么 TCP 这么复杂?")]),t._v(" "),v("p",[t._v("因为既要保证可靠性, 同时又要尽可能提高性能")]),t._v(" "),v("p",[t._v("保证可靠性的机制")]),t._v(" "),v("ul",[v("li",[t._v("校验和")]),t._v(" "),v("li",[t._v("序列号(按序到达)")]),t._v(" "),v("li",[t._v("确认应答")]),t._v(" "),v("li",[t._v("超时重传")]),t._v(" "),v("li",[t._v("连接管理")]),t._v(" "),v("li",[t._v("流量控制")]),t._v(" "),v("li",[t._v("拥塞控制")])]),t._v(" "),v("p",[t._v("提高性能的机制")]),t._v(" "),v("ul",[v("li",[t._v("滑动窗口")]),t._v(" "),v("li",[t._v("快速重传")]),t._v(" "),v("li",[t._v("延迟应答")]),t._v(" "),v("li",[t._v("捎带应答")])]),t._v(" "),v("p",[t._v("定时器")]),t._v(" "),v("ul",[v("li",[t._v("超时重传定时器")]),t._v(" "),v("li",[t._v("保活定时器")]),t._v(" "),v("li",[t._v("TIME_WAIT 定时器")])]),t._v(" "),v("h4",{attrs:{id:"基于-tcp-的应用层协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基于-tcp-的应用层协议"}},[t._v("#")]),t._v(" 基于 TCP 的应用层协议")]),t._v(" "),v("ul",[v("li",[t._v("HTTP")]),t._v(" "),v("li",[t._v("HTTPS")]),t._v(" "),v("li",[t._v("SSH")]),t._v(" "),v("li",[t._v("Telnet")]),t._v(" "),v("li",[t._v("FTP")]),t._v(" "),v("li",[t._v("SMTP")])]),t._v(" "),v("h2",{attrs:{id:"udp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[t._v("#")]),t._v(" "),v("strong",[t._v("UDP")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[t._v("UDP")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("TCP")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("无连接")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("面向连接(间传输数据之前要先建立连接)")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("支持一对多、多对一、一对一、多对多交互通信")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("TCP 连接只能是一对一通信")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("面向报文，对用应用层交付的报文直接打包")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("面向字节流，把数据看成一串无结构的字节流")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("不可靠")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("可靠传输，使用流量控制和拥塞控制，传输的数据不会丢失，没有重复，按顺序到达")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("首部开销小，仅 8 字节")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("首部最小 20 字节，最大 60 字节")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("适用于实时应用（IP 电话、视频会议）")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("文件传输")])])])]),t._v(" "),v("h3",{attrs:{id:"面向报文"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面向报文"}},[t._v("#")]),t._v(" 面向报文")]),t._v(" "),v("p",[t._v("UDP 是一个面向报文（报文可以理解为一段段的数据）的协议。意思就是 UDP 只是报文的搬运工，不会对报文进行任何拆分和拼接操作。")]),t._v(" "),v("p",[t._v("具体来说")]),t._v(" "),v("ul",[v("li",[t._v("在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了")]),t._v(" "),v("li",[t._v("在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作")])]),t._v(" "),v("h3",{attrs:{id:"不可靠性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#不可靠性"}},[t._v("#")]),t._v(" 不可靠性")]),t._v(" "),v("ol",[v("li",[t._v("UDP 是无连接的，也就是说通信不需要建立和断开连接。")]),t._v(" "),v("li",[t._v("UDP 也是不可靠的。协议收到什么数据就传递什么数据，并且也不会备份数据，对方能不能收到是不关心的")]),t._v(" "),v("li",[t._v("UDP 没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。")])]),t._v(" "),v("h3",{attrs:{id:"高效"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#高效"}},[t._v("#")]),t._v(" 高效")]),t._v(" "),v("p",[t._v("因为 UDP 没有 TCP 那么复杂，需要保证数据不丢失且有序到达。所以 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://yck-1254263422.cos.ap-shanghai.myqcloud.com/blog/2019-06-01-42633.png",alt:""}})]),t._v(" "),v("p",[t._v("头部包含了以下几个数据")]),t._v(" "),v("ul",[v("li",[t._v("两个十六位的端口号，分别为源端口（可选字段）和目标端口")]),t._v(" "),v("li",[t._v("整个数据报文的长度")]),t._v(" "),v("li",[t._v("整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误")])]),t._v(" "),v("h3",{attrs:{id:"传输方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#传输方式"}},[t._v("#")]),t._v(" 传输方式")]),t._v(" "),v("p",[t._v("UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。")]),t._v(" "),v("h2",{attrs:{id:"dns-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dns-2"}},[t._v("#")]),t._v(" "),v("strong",[t._v("DNS")])]),t._v(" "),v("p",[t._v("DNS(Domaim Name System)服务是和 HTTP 协议一样位于应用层的协议。DNS 协议通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。")]),t._v(" "),v("p",[t._v("主要用于 UDP，但是当请求字节过长超过 512 字节时用 TCP 协议，将其分割成多个片段传输。")]),t._v(" "),v("p",[t._v("DNS 协议默认端口号是 53。")]),t._v(" "),v("p",[t._v("操作系统的 DNS 缓存：windows DNS 缓存的默认值是 MaxCacheTTL，它的默认值是 86400s，也就是一天。macOS 严格遵循 DNS 协议中的 TTL。\n游览器的 DNS 缓存：chrome 对每个域名会默认缓存 60s；IE 将 DNS 缓存 30min；Firefox 默认缓存时间只有 1 分钟；Safari 约为 10S。")])])}),[],!1,null,null,null);_.default=e.exports}}]);