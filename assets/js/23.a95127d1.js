(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{354:function(t,v,_){"use strict";_.r(v);var a=_(4),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"跨站和跨域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#跨站和跨域"}},[t._v("#")]),t._v(" "),_("strong",[t._v("跨站和跨域")])]),t._v(" "),_("p",[t._v("首先要理解的一点就是跨站和跨域是不同的。同站(same-site)/跨站(cross-site)」和第一方(first-party)/第三方(third-party)是等价的。但是与浏览器同源策略（SOP）中的「同源(same-origin)/跨域(cross-origin)」是完全不同的概念。")]),t._v(" "),_("p",[t._v("同源策略的同源是指两个 URL 的协议/主机名/端口一致。例如，https://www.taobao.com/pages/...，它的协议是 https，主机名是 www.taobao.com，端口是 443。")]),t._v(" "),_("p",[t._v("同源策略作为浏览器的安全基石，其「同源」判断是比较严格的，相对而言，Cookie 中的「同站」判断就比较宽松：只要两个 URL 的 eTLD+1 相同即可，不需要考虑协议和端口。其中，eTLD 表示有效顶级域名，注册于 Mozilla 维护的公共后缀列表（Public Suffix List）中，例如，.com、.co.uk、.github.io 等。eTLD+1 则表示，有效顶级域名+二级域名，例如 taobao.com 等。")]),t._v(" "),_("p",[t._v("举几个例子，www.taobao.com 和 www.baidu.com 是跨站，www.a.taobao.com 和 www.b.taobao.com 是同站，a.github.io 和 b.github.io 是跨站(注意是跨站)。")]),t._v(" "),_("h2",{attrs:{id:"xss-跨站脚本攻击"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xss-跨站脚本攻击"}},[t._v("#")]),t._v(" "),_("strong",[t._v("XSS 跨站脚本攻击")])]),t._v(" "),_("p",[_("a",{attrs:{href:"https://juejin.im/post/5bad9140e51d450e935c6d64",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端安全系列（一）：如何防止 XSS 攻击？"),_("OutboundLink")],1)]),t._v(" "),_("p",[t._v("XSS 是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。")]),t._v(" "),_("h3",{attrs:{id:"xss-攻击的危害包括："}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xss-攻击的危害包括："}},[t._v("#")]),t._v(" XSS 攻击的危害包括：")]),t._v(" "),_("ol",[_("li",[t._v("获取页面数据")]),t._v(" "),_("li",[t._v("获取 cookie")]),t._v(" "),_("li",[t._v("劫持前端逻辑")]),t._v(" "),_("li",[t._v("发送请求")]),t._v(" "),_("li",[t._v("偷取网站任意数据")]),t._v(" "),_("li",[t._v("偷取用户资料")]),t._v(" "),_("li",[t._v("偷取用户密码和登陆态")]),t._v(" "),_("li",[t._v("欺骗用户")])]),t._v(" "),_("h3",{attrs:{id:"xss-攻击分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xss-攻击分类"}},[t._v("#")]),t._v(" XSS 攻击分类")]),t._v(" "),_("h4",{attrs:{id:"反射型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#反射型"}},[t._v("#")]),t._v(" 反射型")]),t._v(" "),_("p",[t._v("通过 url 参数直接注入。")]),t._v(" "),_("p",[t._v("发出请求时，XSS 代码出现在 URL 中，作为输入提交到服务器端，服务端解析后返回，XSS 代码随响应内容一起传回给浏览器，最后浏览器执行 XSS 代码。这个过程像一次反射，故叫做反射型 XSS。")]),t._v(" "),_("p",[_("strong",[t._v("举个例子")])]),t._v(" "),_("p",[t._v("一个链接，里面的 query 字段中包含一个 script 标签，这个标签的 src 就是恶意代码，用户点击了这个链接后会先向服务器发送请求，服务器返回时也携带了这个 XSS 代码，然后浏览器将查询的结果写入 Html，这时恶意代码就被执行了。")]),t._v(" "),_("p",[t._v("并不是在 url 中没有包含 script 标签的网址都是安全的，可以使用短网址来让网址变得很短。")]),t._v(" "),_("h4",{attrs:{id:"存储型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#存储型"}},[t._v("#")]),t._v(" 存储型")]),t._v(" "),_("p",[t._v("存储型 XSS 会被保存到数据库，在其他用户访问（前端）到这条数据时，这个代码会在访问用户的浏览器端执行。")]),t._v(" "),_("p",[_("strong",[t._v("举个例子")])]),t._v(" "),_("p",[t._v("比如攻击者在一篇文章的评论中写入了 script 标签，这个评论被保存数据库，当其他用户看到这篇文章时就会执行这个脚本。")]),t._v(" "),_("h4",{attrs:{id:"dom-型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dom-型"}},[t._v("#")]),t._v(" DOM 型")]),t._v(" "),_("p",[t._v("DOM 型指的是攻击者构建了特殊的 URL，用户打开网站后，js 脚本从 URL 中获取数据，从而导致了恶意代码的执行。")]),t._v(" "),_("h3",{attrs:{id:"xss-防御"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xss-防御"}},[t._v("#")]),t._v(" XSS 防御")]),t._v(" "),_("ol",[_("li",[t._v("转义字符")])]),t._v(" "),_("p",[t._v("对需要插入到 HTML 中的代码做好充分的转义")]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("CSP 内容安全策略")])]),t._v(" "),_("p",[t._v("CSP 本质上就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的")]),t._v(" "),_("p",[t._v("通常可以通过两种方式来开启 CSP：")]),t._v(" "),_("ul",[_("li",[t._v("设置 HTTP Header 中的 "),_("code",[t._v("Content-Security-Policy")])]),t._v(" "),_("li",[t._v("设置 meta 标签的方式 "),_("code",[t._v('<meta http-equiv="Content-Security-Policy">')])])]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[_("p",[t._v("cookie 使用 HttpOnly ，使得脚本 document.cookie 无法获取。")])]),t._v(" "),_("li",[_("p",[t._v("验证码，避免脚本伪装成用户执行一些操作。")])])]),t._v(" "),_("h2",{attrs:{id:"csrf-跨站请求伪造"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#csrf-跨站请求伪造"}},[t._v("#")]),t._v(" "),_("strong",[t._v("CSRF 跨站请求伪造")])]),t._v(" "),_("p",[t._v("攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。")]),t._v(" "),_("p",[_("img",{attrs:{src:"/assets/img/csrf.png",alt:"原理"}})]),t._v(" "),_("ol",[_("li",[t._v("登录受信任网站 A，并在本地生成 Cookie")]),t._v(" "),_("li",[t._v("受害者访问危险网站 B，网站 B 中发送请求给网站 A，请求会自动带上 Cookie")])]),t._v(" "),_("h3",{attrs:{id:"csrf-防御"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#csrf-防御"}},[t._v("#")]),t._v(" CSRF 防御")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("验证码（因为 CSRF 的攻击往往在受害者不知情的时候成功）")])]),t._v(" "),_("li",[_("p",[t._v("检查请求的 Referer 头部")])])]),t._v(" "),_("p",[t._v("通常网站的页面与页面之间有一定的逻辑联系，例如想要发送登录的请求 example.com/api/login 时，通常用户在登录的页面 example.com/login 下。那么我们只需要验证请求的 Referer 是否为 example.com/login 即可。")]),t._v(" "),_("p",[t._v("缺陷：某些情况下浏览器不会发送 Referer")]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[_("p",[t._v("Cookie 的 SameSite")])]),t._v(" "),_("li",[_("p",[t._v("CSRF Token")])])]),t._v(" "),_("p",[t._v("CSRF 的本质在于请求的参数可以被攻击者猜到")]),t._v(" "),_("p",[t._v("Token 是一个随机数，同时存放在表单和用户的 Cookie 中，发送请求后服务器对请求实体的 token 和 cookie 中的 token 进行对比")])])}),[],!1,null,null,null);v.default=s.exports}}]);